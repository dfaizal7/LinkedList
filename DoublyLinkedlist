package linkdlist;

public class DoublyLinkedList {
    Node head ;
    Node tail;
    class Node{
        int Data;
        Node prev;
        Node next;
        Node(int val){
            Data = val;
            prev = null;
            next = null;
        }
    }
    DoublyLinkedList(){
        head = null;
        tail = null;
    }
    public void InsertAtbeginning(int val){
        Node newnode = new Node(val);
        newnode.next = head;
        if(head == null){
            tail = newnode;
        }else{
            head.prev = newnode;
        }
        head = newnode;
    }
    public void InsertAtPos(int val,int pos){
        Node newnode = new Node(val);
        Node temp = head;
        if(pos == 0){
            InsertAtbeginning(val);
            return;
        }
        if(temp == null){
            throw new IndexOutOfBoundsException("Position exceeds the number of nodes");
        }
        for(int i = 1; i<pos; i++){
            temp = temp.next;
        }
        newnode.next = temp.next;
        temp.next = newnode;
        newnode.prev = temp;
        Node temp1= temp.next;
        temp1.prev = newnode;
    }
    public void Displayfromhead(){
        Node temp = head;
        while(temp!=null){
            System.out.println(temp.Data);
            temp = temp.next;
        }
    }
    public void DisplayRev(){
        Node temp = tail;
        while (temp!=null){
            System.out.println(temp.Data);
            temp=temp.prev;
        }
    }

}

